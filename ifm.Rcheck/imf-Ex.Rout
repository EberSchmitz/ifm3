
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "imf"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('imf')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("disc")
> ### * disc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: disc
> ### Title: ~~function to do ... ~~
> ### Aliases: disc
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (r, n, bop = FALSE) 
+ {
+     t < -1/(1 + r)
+     e <- if (bop) {
+         0:(n - 1)
+     }
+     else {
+         1:n
+     }
+     return(t^e)
+   }
function (r, n, bop = FALSE) 
{
    t < -1/(1 + r)
    e <- if (bop) {
        0:(n - 1)
    }
    else {
        1:n
    }
    return(t^e)
}
> 
> 
> 
> cleanEx()
> nameEx("drawcfs")
> ### * drawcfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drawcfs
> ### Title: ~~function to do ... ~~
> ### Aliases: drawcfs
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (cfs) 
+ {
+     plot(cfs, xlab = "Periodo", ylab = "y")
+     abline(h = c(0))
+     title("Fluxo de Caixa")
+     count <- 0
+     for (i in cfs) {
+         count <- count + 1
+         if (i != 0) {
+             arrows(count, 0, count, i, length = 0.1, angle = 20)
+         }
+     }
+   }
function (cfs) 
{
    plot(cfs, xlab = "Periodo", ylab = "y")
    abline(h = c(0))
    title("Fluxo de Caixa")
    count <- 0
    for (i in cfs) {
        count <- count + 1
        if (i != 0) {
            arrows(count, 0, count, i, length = 0.1, angle = 20)
        }
    }
}
> 
> 
> 
> cleanEx()
> nameEx("fv")
> ### * fv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fv
> ### Title: ~~function to do ... ~~
> ### Aliases: fv
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (Pv, r, n) 
+ {
+     return(Pv * (1 + (r/100))^n)
+   }
function (Pv, r, n) 
{
    return(Pv * (1 + (r/100))^n)
}
> 
> 
> 
> cleanEx()
> nameEx("ifir")
> ### * ifir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ifir
> ### Title: ~~ Function to calculate inflation free interest rate. ~~
> ### Aliases: ifir
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (r, f) 
+ {
+     return((r - f)/(1 + f))
+   }
function (r, f) 
{
    return((r - f)/(1 + f))
}
> 
> 
> 
> cleanEx()
> nameEx("imf-package")
> ### * imf-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imf-package
> ### Title: Set of functions for financial evaluation of Software Projects
> ### Aliases: imf-package imf
> ### Keywords: package
> 
> ### ** Examples
> 
> ## examples here...
> 
> 
> 
> cleanEx()
> nameEx("nfv")
> ### * nfv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nfv
> ### Title: ~~function to do ... ~~
> ### Aliases: nfv
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (cfs, r, bop = TRUE) 
+ {
+     e <- if (bop) {
+         0:(length(cfs) - 1)
+     }
+     else {
+         1:(length(cfs))
+     }
+     tax <- (1 + (r/100))^e
+     return(cfs * tax)
+   }
function (cfs, r, bop = TRUE) 
{
    e <- if (bop) {
        0:(length(cfs) - 1)
    }
    else {
        1:(length(cfs))
    }
    tax <- (1 + (r/100))^e
    return(cfs * tax)
}
> 
> 
> 
> cleanEx()
> nameEx("npv")
> ### * npv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: npv
> ### Title: ~~function to do ... ~~
> ### Aliases: npv
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (cfs, r, bop = TRUE) 
+ {
+     e <- if (bop) {
+         0:(length(cfs) - 1)
+     }
+     else {
+         1:(length(cfs))
+     }
+     tax <- (1/((1 + (r/100))^e))
+     return(cfs * tax)
+   }
function (cfs, r, bop = TRUE) 
{
    e <- if (bop) {
        0:(length(cfs) - 1)
    }
    else {
        1:(length(cfs))
    }
    tax <- (1/((1 + (r/100))^e))
    return(cfs * tax)
}
> 
> 
> 
> cleanEx()
> nameEx("pv")
> ### * pv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pv
> ### Title: ~~function to do ... ~~
> ### Aliases: pv
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (Fv, r, n) 
+ {
+     return(Fv/(1 + (r/100))^n)
+   }
function (Fv, r, n) 
{
    return(Fv/(1 + (r/100))^n)
}
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.085 0.003 0.092 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
